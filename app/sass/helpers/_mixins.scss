// Media Queries
	@mixin min($breakpoint, $breakpoints: $breakpoints){
		$value: map-get($breakpoints,$breakpoint);
		@if $value != null  {
			@media (min-width: $value ) {
				@content;
			}
		}@else{
			 @error $error-variable + " #{$breakpoint}";
		}
	}
	@mixin max($breakpoint, $breakpoints: $breakpoints){
		$value: map-get($breakpoints,$breakpoint);
		@if $value != null { 
			@media (max-width: $value - 1px) {
				@content;
			} 
		}@else{
			 @error $error-variable + " #{$breakpoint}";
		}
	}

	// Offset
		@mixin xOffset($gn, $gl, $gr: $gl){
			#{$gn}-left: $gl;
			#{$gn}-right: $gr;
		}



// Миксин, который будет брать размеры шрифтов с карты($sizes)
@mixin fs($fs-map, $sizes: $sizes, $fs-breakpoints: $breakpoints){
	$fs-map: map-get($sizes, $fs-map);
	@each $fs-breakpoint, $fs-font-size in $fs-map{
		$fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
		@if $fs-breakpoint != null{
			@media (min-width: $fs-breakpoint){
				font-size: $fs-font-size;
			}
		}@else{
			@error 'No size';
		} 
	}
}

// Миксин, позволяющий загружать картинки
@mixin bg($url, $pos: 0 0, $repeat: no-repeat, $size: cover){
	background: url('#{$url}') $pos $repeat;
	background-size: $size;
}

// Pseudo elements
@mixin pseudo($contentText: ""){
	content: $contentText;
	position: absolute;
}

// Миксин для создание transition
@mixin transition($tr-prop: all, $tr-time: ease, $tr-dur: .5s){
	transition: $tr-prop $tr-time $tr-dur;
}

@mixin size($width, $height: $width){
	width: $width;
	height: $height;
}

@mixin placeholder {
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

@mixin vertical-image($height){
	height: $height;
	&:before{
		content: "";
		display: inline-block;
		height: 100%;
		vertical-align: middle;   
	}
	img{
		max-height: 100%;
		vertical-align: middle;   
	}
}

////
/// @author Vsevolod Kurochka
/// @param {String} $name - Element's classname
/// @group BEM
////

/// Create an `BLOCK` of BEM structure.
/// @example scss - Create `BLOCK` with className `.foo`
/// @include block('foo'){
///		font-size: 12px;
/// }
@mixin block($name) {
  .#{$themePrefix}#{$name} {
    @content;
  }
}

/// Create an `ELEMENT` of BEM structure.
/// @example scss - Create `BLOCK` with className `.foo`
/// @include block('foo'){
/// 	@include element('bar'){
/// 		font-size: 12px;
/// 	}
/// }
@mixin element($name) {
  &__#{$name} {
    @content;
  }
}

/// Create an `Modifier` of BEM structure.
/// @example scss - Create `Modifier` for `BLOCK` with className `.foo`
/// @include block('foo'){
/// 	color: #ddd;
/// 	@include mod('baz'){
/// 		color: #f000;
/// 	}
/// }
@mixin mod($name) {
  &_#{$name} {
    @content;
  }
}

/// Create an `Element Of Element` of BEM structure
/// @example scss - Create `Element Of Element`
/// @include block('nav'){
/// 	@include element('menu'){
/// 		@include el-of-el('item'){
/// 			font-size: 12px;
/// 		}
/// 	}
/// }
@mixin el-of-el($name) {
  &-#{$name} {
    @content;
  }
}

////
/// @group bem-shorthand
/// @author Vsevolod Kurochka
////

/// Shorthand for `block`
/// @param {String} $name - Block class
@mixin b($name) {
  @include block($name) {
    @content;
  }
}

/// Shorthand for `element`
/// @param {String} $name - Element class
@mixin e($name) {
  @include element($name) {
    @content;
  }
}

/// Shorthand for `el-of-el`
/// @param {String} $name - Element of element classname
@mixin ee($name) {
  @include el-of-el($name) {
    @content;
  }
}

/// Shorthand for `el-of-el`
/// @param {String} $name - Element of element classname
@mixin m($name) {
  @include mod($name) {
    @content;
  }
}

@mixin font($font){
	@if $font == 'general'{
		font-family: 'Roboto', sans-serif;
	}@else if $font == 'secondary'{
		font-family: 'Oswald', sans-serif;
	}
}